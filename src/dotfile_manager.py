import os
import shutil
import subprocess
from pathlib import Path
from typing import Dict, List


class DotfileManager:
    def __init__(self, dotfiles_dir: str = "./dotfiles"):
        """
        :param dotfiles_dir: –ü—É—Ç—å –∫ –ø–∞–ø–∫–µ —Å –∏—Å—Ö–æ–¥–Ω—ã–º–∏ –∫–æ–Ω—Ñ–∏–≥–∞–º–∏ (–æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ —Å–∫—Ä–∏–ø—Ç–∞ –∏–ª–∏ –∞–±—Å–æ–ª—é—Ç–Ω—ã–π)
        """

        self.dotfiles_dir = Path(dotfiles_dir).resolve()
        if not self.dotfiles_dir.exists():
            raise  FileNotFoundError(f"–ü–∞–ø–∫–∞ —Å –∫–æ–Ω—Ñ–∏–≥–∞–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {self.dotfiles_dir}")


    def _ensure_dir(self, target_dir: Path):
        """–°–æ–∑–¥–∞–µ—Ç —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é, –µ—Å–ª–∏ –µ–µ –Ω–µ—Ç"""

        target_dir.mkdir(parents=True, exist_ok=True)


    def symlink_file(self, source: Path, target: Path):
        """–°–æ–∑–¥–∞–µ—Ç —Å–∏–º–æ–ª–∏—á–µ—Å–∫—É—é —Å—Å—ã–ª–∫—É (–ø–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç, –µ—Å–ª–∏ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç)"""

        if target.exists() or target.is_symlink():
            if target.is_symlink():
                target.unlink()
            else:
                backup = target.with_suffix(target.suffix + ".bak")
                shutil.move(str(target), str(backup))
                print(f"‚ö†Ô∏è  –°—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ñ–∞–π–ª —Å–æ—Ö—Ä–∞–Ω—ë–Ω –∫–∞–∫: {backup}")

        self._ensure_dir(target.parent)
        target.symlink_to(source)
        print(f"üîó –°–æ–∑–¥–∞–Ω–∞ —Å—Å—ã–ª–∫–∞: {target} ‚Üí {source}")

    def deploy_configs(self, config_map: Dict[str, str]):
        """
        –†–∞–∑–≤–æ—Ä–∞—á–∏–≤–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥–∏ –ø–æ –∑–∞–¥–∞–Ω–Ω–æ–π –∫–∞—Ä—Ç–µ.
        :param config_map: { "–ø—É—Ç—å_–≤_dotfiles": "$XDG_CONFIG_HOME/..." –∏–ª–∏ "~/.–∏–º—è" }
        """
        for rel_source, rel_target in config_map.items():
            source = self.dotfiles_dir / rel_source
            if not source.exists():
                print(f"‚ùå –ü—Ä–æ–ø—É—â–µ–Ω: {source} (–Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç)")
                continue

            target = os.path.expandvars(os.path.expanduser(rel_target))
            target_path = Path(target)

            if source.is_dir():
                if target_path.exists():
                    shutil.rmtree(target_path)
                shutil.copytree(source, target_path)
                print(f"üìÅ –°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∞ –ø–∞–ø–∫–∞: {target_path}")
            else:
                self.symlink_file(source, target_path)