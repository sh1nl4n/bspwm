import os
import shutil
from pathlib import Path
from typing import Dict

class DotfileManager:
    def __init__(self, dotfiles_dir: str = "./dotfiles"):
        """
        :param dotfiles_dir: –ü—É—Ç—å –∫ –ø–∞–ø–∫–µ —Å –∏—Å—Ö–æ–¥–Ω—ã–º–∏ –∫–æ–Ω—Ñ–∏–≥–∞–º–∏
        """
        self.dotfiles_dir = Path(dotfiles_dir).resolve()
        if not self.dotfiles_dir.exists():
            raise FileNotFoundError(f"–ü–∞–ø–∫–∞ —Å –∫–æ–Ω—Ñ–∏–≥–∞–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {self.dotfiles_dir}")


    def _backup_if_exists(self, target: Path):
        """–°–æ–∑–¥–∞—ë—Ç —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —Ñ–∞–π–ª–∞/–ø–∞–ø–∫–∏."""
        if target.exists():
            backup = target.with_suffix(target.suffix + ".bak")
            if backup.exists():
                shutil.rmtree(backup) if backup.is_dir() else backup.unlink()
            if target.is_dir():
                shutil.copytree(target, backup)
            else:
                shutil.copy2(target, backup)
            print(f"‚ö†Ô∏è  –°—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ñ–∞–π–ª/–ø–∞–ø–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –∫–∞–∫: {backup}")
            if target.is_dir():
                shutil.rmtree(target)
            else:
                target.unlink()


    def _copy_file_or_dir(self, source: Path, target: Path):
        """–ö–æ–ø–∏—Ä—É–µ—Ç —Ñ–∞–π–ª –∏–ª–∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ —Ü–µ–ª–µ–≤–æ–µ –º–µ—Å—Ç–æ."""
        self._backup_if_exists(target)

        target.parent.mkdir(parents=True, exist_ok=True)

        if source.is_dir():
            shutil.copytree(source, target)
            print(f"üìÅ –°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∞ –ø–∞–ø–∫–∞: {target}")
        else:
            shutil.copy2(source, target)
            print(f"üìÑ –°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω —Ñ–∞–π–ª: {target}")


    def deploy_configs(self, config_map: Dict[str, str]):
        """
        –ö–æ–ø–∏—Ä—É–µ—Ç –∫–æ–Ω—Ñ–∏–≥–∏ –∏–∑ dotfiles_dir –≤ —Ü–µ–ª–µ–≤—ã–µ –ø—É—Ç–∏.
        :param config_map: {"–ø—É—Ç—å_–≤_dotfiles": "~/.config/..."}
        """
        for rel_source, rel_target in config_map.items():
            source = self.dotfiles_dir / rel_source
            if not source.exists():
                print(f"‚ùå –ü—Ä–æ–ø—É—â–µ–Ω: {source} (–Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç)")
                continue

            target = Path(os.path.expandvars(os.path.expanduser(rel_target)))

            self._copy_file_or_dir(source, target)